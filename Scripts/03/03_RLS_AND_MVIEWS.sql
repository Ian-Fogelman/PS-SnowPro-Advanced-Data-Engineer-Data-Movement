-- 01 - SET THE SCHEMA TO PS_SPADEDM.PUBLIC, CREATE THE DATABASE IF IT DOES NOT ALREADY EXIST.
--CREATE DATABASE ps_spadedm;
USE SCHEMA PS_SPADEDM.PUBLIC;

-- 02 CREATE THE PLURALSIGHT_COURSE TABLE
CREATE OR REPLACE TABLE PLURALSIGHT_COURSES
(
ID INT,
URL VARCHAR,
AUTHOR_NAME VARCHAR,
SUBJECT VARCHAR,
STATUS VARCHAR
);

-- 03 CREATE THE ROLES

CREATE OR REPLACE ROLE GENERAL_USER;
GRANT USAGE ON DATABASE PS_SPADEDM TO ROLE GENERAL_USER; 
GRANT USAGE ON SCHEMA PS_SPADEDM.PUBLIC TO ROLE GENERAL_USER;
GRANT SELECT ON TABLE PS_SPADEDM.PUBLIC.PLURALSIGHT_COURSES TO ROLE GENERAL_USER;
GRANT USAGE ON WAREHOUSE COMPUTE_WH TO ROLE GENERAL_USER;

CREATE OR REPLACE ROLE ADMIN_USER;
GRANT USAGE ON DATABASE PS_SPADEDM TO ROLE ADMIN_USER; 
GRANT USAGE ON SCHEMA PS_SPADEDM.PUBLIC TO ROLE ADMIN_USER;
GRANT SELECT ON TABLE PS_SPADEDM.PUBLIC.PLURALSIGHT_COURSES TO ROLE ADMIN_USER;
GRANT USAGE ON WAREHOUSE COMPUTE_WH TO ROLE ADMIN_USER;

--GRANT THE ROLES TO THE CURRENT_USER()
SELECT CURRENT_USER();

GRANT ROLE GENERAL_USER TO USER IFOGELMAN;
GRANT ROLE ADMIN_USER TO USER IFOGELMAN;


--03 INSERT RECORDS INTO THE PLURALSIGHT_COURSES TABLE

INSERT INTO PLURALSIGHT_COURSES VALUES('1','https://www.pluralsight.com/courses/snowpro-core-data-protection-sharing','Pinal Dave','Snowflake','Completed');
INSERT INTO  PLURALSIGHT_COURSES VALUES('2','https://www.pluralsight.com/courses/snowpro-advanced-data-analyst-data-ingestion-preparation-cert','Bismark Adomako','Snowflake','Completed');
INSERT INTO  PLURALSIGHT_COURSES VALUES('3','https://www.pluralsight.com/courses/snowpro-advanced-data-analyst-transformation-modeling-cert','Ian Fogelman','Snowflake','Completed');
INSERT INTO  PLURALSIGHT_COURSES VALUES('4','https://www.pluralsight.com/courses/c-sharp-10-playbook','Simon Robinson','C#','Completed');
INSERT INTO  PLURALSIGHT_COURSES VALUES('5','https://www.pluralsight.com/courses/c-sharp-tips-traps','Jason Roberts','C#','Completed');
INSERT INTO  PLURALSIGHT_COURSES VALUES('6','https://www.pluralsight.com/courses/tableau-desktop-manipulating-data','Adam Crahen','Tableau','Completed');
INSERT INTO  PLURALSIGHT_COURSES VALUES('7','https://www.pluralsight.com/courses/powershell-scripting-getting-started','Liam Cleary','Powershell','Completed');
INSERT INTO  PLURALSIGHT_COURSES VALUES('8','https://www.pluralsight.com/courses/underwater-basketweaving','Tim Davidson','Scuba diving','In-progress');
INSERT INTO  PLURALSIGHT_COURSES VALUES('9','https://www.pluralsight.com/courses/how-to-care-for-a-lost-squirrel','Owen Gantz','Squirrel Care','In-progress');
INSERT INTO  PLURALSIGHT_COURSES VALUES('10','https://www.pluralsight.com/courses/picking-the-proper-office-char','Renee Smith','Office supplies','In-progress');

-- VIEW THE RECORDS IN THE DATABASE
SELECT * FROM PLURALSIGHT_COURSES;

--04 CREATE THE ACCESS POLICY

CREATE OR REPLACE ROW ACCESS POLICY PS_ACCESS_POLICY 
AS (STATUS STRING) 
RETURNS BOOLEAN -> CASE 
         WHEN current_role() = 'GENERAL_USER' AND STATUS= 'Completed' THEN TRUE 
         WHEN current_role() = 'ADMIN_USER' THEN TRUE 
         ELSE FALSE
END;

-- VIEW THE NEWLY CREATED ACCESS POLICY
SHOW ROW ACCESS POLICIES;


--05 ADD THE POLICY TO THE TABLE

ALTER TABLE PLURALSIGHT_COURSES 
ADD ROW ACCESS POLICY PS_ACCESS_POLICY ON (STATUS);

--06 TEST THE ACCESS POLICY WITH MULTIPLE ROWS

USE ROLE GENERAL_USER;
SELECT * FROM PS_SPADEDM.PUBLIC.PLURALSIGHT_COURSES;

USE ROLE ADMIN_USER;
SELECT * FROM PS_SPADEDM.PUBLIC.PLURALSIGHT_COURSES;

--07 TEST THE ACCESS POLICY WITH A VIEW

USE ROLE ACCOUNTADMIN;

CREATE OR REPLACE VIEW VW_PLURALSIGHT_COURSES 
AS 
SELECT * FROM PLURALSIGHT_COURSES;

GRANT SELECT ON VIEW PS_SPADEDM.PUBLIC.VW_PLURALSIGHT_COURSES TO ROLE GENERAL_USER;
GRANT SELECT ON TABLE PS_SPADEDM.PUBLIC.VW_PLURALSIGHT_COURSES TO ROLE ADMIN_USER;

USE ROLE GENERAL_USER;
SELECT * FROM PS_SPADEDM.PUBLIC.VW_PLURALSIGHT_COURSES;

-- ACCESS POLICY LIMITATIONS AND CONSIDERATIONS
-- ACCESS POLICIES ADD SOME OVERHEAD TO YOUR QUEIRES.
-- EXTERNAL TABLE AND STREAM ARE NOT SUPPORTED FOR ACCESS POLICIES.
-- APPLYING A POLICY TO A TABLE THAT ALREADY HAS A POLICY CAN CAUSE ERRORS. UPDATE THE EXISTING POLICY.

-- MATERIALIZED VIEWS 
-- 01 
USE ROLE ACCOUNTADMIN;
-- GET QUERY STATS FOR THE BASELINE TABLE.
SELECT COUNT(*) FROM SNOWFLAKE_SAMPLE_DATA.TPCH_SF100.LINEITEM; -- SNOWFLAKE_SAMPLE_DATA.TPCH_SF100.LINEITEM |  ~600,037,902ROWS

-- TURN OFF THE QUERY RESULT CACHE
ALTER SESSION SET USE_CACHED_RESULT=FALSE;

-- RUN THE QUERY THAT WILL BE IN THE VIEW TO GET A BASELINE FOR EXECUTION: += ~7 SECONDS EXECUTION @X-SMALL
SELECT 
SUM(L_EXTENDEDPRICE) AS total_sales,
COUNT(*) AS TOTAL_TRANSACTIONS, 
CASE WHEN SUM(L_EXTENDEDPRICE) > 75000 THEN 'BIG'
     WHEN SUM(L_EXTENDEDPRICE) > 50000 THEN 'MEDIUM'
     ELSE 'SMALL' END AS ORDER_SIZE,
LOWER(L_RETURNFLAG) AS L_RETURNFLAG,
L_SHIPMODE,
L_SHIPDATE

FROM SNOWFLAKE_SAMPLE_DATA.TPCH_SF100.LINEITEM 
GROUP BY L_SHIPMODE,L_SHIPDATE,LOWER(L_RETURNFLAG);


--02 CREATE THE MATERALIZED VIEW

CREATE OR REPLACE MATERIALIZED VIEW VW_MATERIALIZED_EXAMPLE AS 

SELECT 
SUM(L_EXTENDEDPRICE) AS total_sales,
COUNT(*) AS TOTAL_TRANSACTIONS, 
CASE WHEN SUM(L_EXTENDEDPRICE) > 75000 THEN 'BIG'
     WHEN SUM(L_EXTENDEDPRICE) > 50000 THEN 'MEDIUM'
     ELSE 'SMALL' END AS ORDER_SIZE,
LOWER(L_RETURNFLAG) AS L_RETURNFLAG,
L_SHIPMODE,
L_SHIPDATE

FROM SNOWFLAKE_SAMPLE_DATA.TPCH_SF100.LINEITEM 
GROUP BY L_SHIPMODE,L_SHIPDATE,LOWER(L_RETURNFLAG);

-- SELECT FROM THE MATERILIZED VIEW

SELECT * FROM VW_MATERIALIZED_EXAMPLE;

--03 (OPTIONAL) TURN OFF THE MATERILIZED VIEW
-- DROP THE MATEIRALZED VIEW, THIS ENSURE NO CHARGES WILL BE INCURRED.
-- DROP THE VIEW AND THEN RECREATE IT AS A NORMAL VIEW.

DROP VIEW VW_MATERIALIZED_EXAMPLE;

CREATE OR REPLACE VIEW VW_MATERIALIZED_EXAMPLE AS 

SELECT 
SUM(L_EXTENDEDPRICE) AS total_sales,
COUNT(*) AS TOTAL_TRANSACTIONS, 
CASE WHEN SUM(L_EXTENDEDPRICE) > 75000 THEN 'BIG'
     WHEN SUM(L_EXTENDEDPRICE) > 50000 THEN 'MEDIUM'
     ELSE 'SMALL' END AS ORDER_SIZE,
LOWER(L_RETURNFLAG) AS L_RETURNFLAG,
L_SHIPMODE,
L_SHIPDATE

FROM SNOWFLAKE_SAMPLE_DATA.TPCH_SF100.LINEITEM 
GROUP BY L_SHIPMODE,L_SHIPDATE,LOWER(L_RETURNFLAG);

-- Implementing them can have a significant impact on your Snowflake credit consumption.
-- For best result choose a base table that doesn't change too often, everytime the base data changes the materialized view is 
-- recalculated and additional costs are incurred. 
-- And its best to use a 3 part naming convention when defining your materialized view so that no schema changes can break your view.
